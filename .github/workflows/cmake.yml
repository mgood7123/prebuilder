name: CMake

on:
  push:
    branches: [ main ]

concurrency:
  group: build
  cancel-in-progress: true

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  
  # Customize the build folder here
  # IMPORTANT: this MUST NOT conflict with any existing folders
  
  GITHUB_ACTIONS_PREBUILD_BUILD_FOLDER: GITHUB_ACTIONS_PREBUILD_BUILD_FOLDER

  # Customize the output folder here
  # IMPORTANT: this MUST NOT conflict with any existing folders
  
  GITHUB_ACTIONS_PREBUILD_OUT_FOLDER: GITHUB_ACTIONS_PREBUILD_OUT_FOLDER
  
  # Set this to true in order to publish builds to dedicated repos
  # this has the advantage of keeping repository size minimal
  # history is also kept minimal to reduce total repo size
  
  # IMPORTANT: this requires a PUBLIC_ACCESS_TOKEN
  
  PUSH_TO_EXTERNAL_REPO: true

  # Customize the external repo output folder here
  # IMPORTANT: this MUST NOT conflict with any existing folders
  
  GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_FOLDER: GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_FOLDER
  
  # Put your secret here
  # to create a secret, go to
  
  # User Profile -> Settings ->
  # Developer Settings (at the bottom of page) -> Persional Access Tokens
  
  # then generate a new token and give it [public_repo] scope and then
  # click [Generate token]
  # finally copy its token id
  
  # next, go to your repository containing this workflow
  # Settings -> Secrets -> New repository secret

  # in the [Value] field, past the token id that you copied earlier
  
  # in the [Name] field, enter a name, replacing spaces with underscore (_)
  # for example, we will name it REPO_ACCESS_TOKEN
  
  # and then enter it here as ${{secrets.REPO_ACCESS_TOKEN}}
  
  PUBLIC_ACCESS_TOKEN: ${{secrets.REPO_ACCESS_TOKEN}}
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    strategy:
#      fail-fast: false
      max-parallel: 1
      matrix:
        include:
        
        - os: ubuntu-latest
          extension: so
          get_chmod: stat --format \"%a\"

        - os: macOS-latest
          extension: dylib
          get_chmod: stat -f \"%OLp\"

        - os: windows-latest
          extension: dll
          get_chmod: stat --format \"%a\"

    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v2
    
    - name: Git - Pull
      run: |
        git pull
        git status
        
    - name: CMake - Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -D GITHUB_ACTIONS_PREBUILD_EXTENSION=${{matrix.extension}} -B ${{env.GITHUB_ACTIONS_PREBUILD_BUILD_FOLDER}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        git status

    - name: CMake - Build
      # Build your program with the given configuration
      run: |
        cmake --build ${{env.GITHUB_ACTIONS_PREBUILD_BUILD_FOLDER}} --config ${{env.BUILD_TYPE}}
        git status
      
    - name: System - List libraries
      run: |
        find ${{env.GITHUB_ACTIONS_PREBUILD_BUILD_FOLDER}} -name \*.${{matrix.extension}}
        git status
      
    - name: Git - Configure global user email and user name
      run: |
        git config --global user.email "GITHUB_ACTIONS_PREBUILD";
        git config --global user.name "GITHUB_ACTIONS_PREBUILD"
        git status
        
    - name: System - Create <Library Output> directory
      continue-on-error: true
      run: |
        mkdir ${{env.GITHUB_ACTIONS_PREBUILD_OUT_FOLDER}}
        git status
        
    - name: System - Create <Library Output>/<operating system> directory
      continue-on-error: true
      run: |
        mkdir ${{env.GITHUB_ACTIONS_PREBUILD_OUT_FOLDER}}/${{matrix.os}}
        git status

    - name: System - Copy files from build directory to <Library Output>/<operating system> directory
      run: |
        find ${{env.GITHUB_ACTIONS_PREBUILD_BUILD_FOLDER}} -name \*.${{matrix.extension}} -exec cp -v {} ${{env.GITHUB_ACTIONS_PREBUILD_OUT_FOLDER}}/${{matrix.os}}/ \;
        git status
        
    - name: System - Remove build directory
      run: |
        rm -rf ${{env.GITHUB_ACTIONS_PREBUILD_BUILD_FOLDER}}
        git status
        
    - name: System - Split files into smaller files
      run: |
        chmod +x ./split_files.sh
        ./split_files.sh ${{env.GITHUB_ACTIONS_PREBUILD_OUT_FOLDER}}/${{matrix.os}} ${{matrix.extension}} "${{matrix.get_chmod}}"
        git status

    - name: Git - CURRENT REPO - Add files
      run: |
        git add -Av ${{env.GITHUB_ACTIONS_PREBUILD_OUT_FOLDER}}/${{matrix.os}}
        git status
      if: env.PUSH_TO_EXTERNAL_REPO == 'false'
      
    - name: Git - CURRENT REPO - Commit
      continue-on-error: true
      run: |
        git commit -m "push prebuilts for ${{matrix.os}}"
        git status
      if: env.PUSH_TO_EXTERNAL_REPO == 'false'

    - name: Git - CURRENT REPO - Push
      run: |
        git push
        git status
      if: env.PUSH_TO_EXTERNAL_REPO == 'false'

    - name: System - EXTERNAL REPO - Create ssh key if needed
      run: |
        cat GITHUB_ACTIONS_PREBUILD_SSH_KEY || ( \
            ssh-keygen -f GITHUB_ACTIONS_PREBUILD_SSH_KEY -t ed25519 -C "GITHUB_ACTIONS_PREBUILD_SSH_KEY" -P ${{env.PUBLIC_ACCESS_TOKEN}}; \
            echo; \
            echo; \
            git add GITHUB_ACTIONS_PREBUILD_SSH_KEY*; \
            git commit -m "add ssh key"; \
            git push; \
            echo; \
            echo "SSH KEY has been created"; \
            echo; \
            echo; \
            echo "please go to <Your profile> -> Settings -> SSH and GPG Keys"; \
            echo; \
            echo "Click 'New SSH key' or 'Add SSH key'"; \
            echo; \
            echo "In the "Title" field, add a descriptive label for the new key"; \
            echo; \
            echo "Paste your key into the 'Key' field"; \
            echo; \
            echo "click 'Add SSH Key'"; \
            echo; \
            echo "the contents of SSH KEY is"; \
            echo; \
            echo "<SSH KEY CONTENTS BEGIN - ACTUAL CONTENTS BELOW>"; \
            cat GITHUB_ACTIONS_PREBUILD_SSH_KEY.pub; \
            echo "<SSH KEY CONTENTS END - ACTUAL CONTENTS ABOVE>"; \
            echo; \
            echo; \
            echo "I will now pause to give you time to process all of this"; \
            echo; \
            echo "To continue, please open the SSH session below in your terminal and then exit the session after logging in"; \
            echo; \
            echo; \
            echo "For example:"; \
            echo; \
            echo "ssh <session id>"; \
            echo "<press q key to dismiss tmate prompt message>"; \
            echo "$ exit"; \
            touch GITHUB_ACTIONS_PREBUILD_SSH_KEY_RETURN_FALSE; \
        )
        cat GITHUB_ACTIONS_PREBUILD_SSH_KEY_RETURN_FALSE && false || true
      continue-on-error: true
      id: SSH_STEP
      if: env.PUSH_TO_EXTERNAL_REPO == 'true'


    - name: System - EXTERNAL REPO - Setup tmate session if needed
      uses: mxschmitt/action-tmate@v3
      if: env.PUSH_TO_EXTERNAL_REPO == 'true' && steps.SSH_STEP.outcome == 'failure'

    - name: System - EXTERNAL REPO - Configure SSH Key
      run: |
        eval "$(ssh-agent -s)"
        chmod 400 GITHUB_ACTIONS_PREBUILD_SSH_KEY
        chmod 400 GITHUB_ACTIONS_PREBUILD_SSH_KEY.pub
        ssh-add GITHUB_ACTIONS_PREBUILD_SSH_KEY <<< ${{env.PUBLIC_ACCESS_TOKEN}}
        echo "printing added keys - SHA256"
        ssh-add -l -E sha256
        echo "printing added keys - MD5"
        ssh-add -l -E md5
        echo "printed added keys"
        echo "testing connection"
        ssh -vT git@github.com || true
        echo "tested connection"
        echo "unsetting core.sshCommand"
        git config --local --unset-all core.sshCommand || true
        echo "setting core.sshCommand"
        git config --local core.sshCommand="ssh -i GITHUB_ACTIONS_PREBUILD_SSH_KEY"
      if: env.PUSH_TO_EXTERNAL_REPO == 'true'

    - name: Git - EXTERNAL REPO - Clone
      run: |
        git clone ssh://git@github.com/${{github.repository}}-${{matrix.os}} ${{env.GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_FOLDER}}
      if: env.PUSH_TO_EXTERNAL_REPO == 'true'

    - name: Git - EXTERNAL REPO - Create branch if needed
      run: |
        cd ${{env.GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_FOLDER}}
        cat DO_NOT_DELETE_ME.GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_RESET_POINT || ( \
            rm -rf .git; \
            git init; \
            touch DO_NOT_DELETE_ME.GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_RESET_POINT; \
            git add DO_NOT_DELETE_ME.GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_RESET_POINT; \
            git commit -m "first commit"; \
            git branch -M main; \
            git remote add origin ssh://git@github.com/${{github.repository}}-${{matrix.os}}.git; \
            git status; \
            git remote -v; \
            git remote show origin; \
            git push --set-upstream origin main; \
        )
      if: env.PUSH_TO_EXTERNAL_REPO == 'true'

    - name: Git - EXTERNAL REPO - Add files
      run: |
        mv ${{env.GITHUB_ACTIONS_PREBUILD_OUT_FOLDER}}/${{matrix.os}}/* ${{env.GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_FOLDER}}
        cd ${{env.GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_FOLDER}}
        git add -Av
      if: env.PUSH_TO_EXTERNAL_REPO == 'true'

    - name: Git - EXTERNAL REPO - Commit
      continue-on-error: true
      run: |
        cd ${{env.GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_FOLDER}}
        git commit -m "push prebuilts for ${{matrix.os}}"
        git status
      if: env.PUSH_TO_EXTERNAL_REPO == 'true'

    - name: Git - EXTERNAL REPO - Push
      run: |
        cd ${{env.GITHUB_ACTIONS_PREBUILD_EXTERNAL_REPO_FOLDER}}
        git push
        git status
      if: env.PUSH_TO_EXTERNAL_REPO == 'true'
