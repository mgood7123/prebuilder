name: CMake

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os:  [ubuntu-latest, macOS-latest, windows-latest]
        include:
        - os: ubuntu-latest
          out: prebuilt/ubuntu-latest
          listLibs: find build -name \*.so
          mkdir: mkdir prebuilt; mkdir prebuilt/ubuntu-latest
          copyLibs: find build -name \*.so -exec cp -v {} prebuilt/ubuntu-latest \;
          checkout: git branch --remote --list \*GITHUB_PREBUILTS_BOT | grep GITHUB_PREBUILTS_BOT && git switch GITHUB_PREBUILTS_BOT || git checkout -b GITHUB_PREBUILTS_BOT
          rm: rm -rf build
        - os: macOS-latest
          out: prebuilt/macOS-latest
          listLibs: find build -name \*.dylib
          mkdir: mkdir prebuilt; mkdir prebuilt/macOS-latest
          copyLibs: find build -name \*.dylib -exec cp -v {} prebuilt/macOS-latest \;
          checkout: git branch --remote --list \*GITHUB_PREBUILTS_BOT | grep GITHUB_PREBUILTS_BOT && git switch GITHUB_PREBUILTS_BOT || git checkout -b GITHUB_PREBUILTS_BOT
          rm: rm -rf build
        - os: windows-latest
          out: prebuilt/windows-latest
          listLibs: Get-ChildItem -path build -r -filter *.dll
          mkdir: mkdir prebuilt; mkdir prebuilt/windows-latest
          copyLibs: Get-ChildItem -path build -r -filter *.dll | Copy-Item -v -Destination prebuilt/windows-latest
          checkout: git branch --remote --list \*GITHUB_PREBUILTS_BOT | grep GITHUB_PREBUILTS_BOT && git switch GITHUB_PREBUILTS_BOT || git checkout -b GITHUB_PREBUILTS_BOT
          rm: Remove-Item -Recurse -Force build

    steps:
    - uses: actions/checkout@v2
    
    - name: checkout GITHUB_PREBUILTS_BOT
      run: |
        git pull
        ${{matrix.checkout}}
        git checkout -
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}
      
    - name: list libs
      run: ${{matrix.listLibs}}
      
    - name: git config global
      run: |
        git config --global user.email "bot";
        git config --global user.name "bot"

    - name: copy files
      run: |
        ${{matrix.mkdir}}
        ${{matrix.copyLibs}}
        ${{matrix.rm}}
      
#     - name: Setup tmate session
#       uses: mxschmitt/action-tmate@v3
      
    - name: stash
      run: |
        git add -Av prebuilt
        git stash
        git rm -rf .

    - name: checkout
      run: |
        git checkout GITHUB_PREBUILTS_BOT
    
    - name: stash pop
      run: |
        git stash pop
        git commit -m "automated push"
        
    - name: push
      run: |
        git push --set-upstream origin GITHUB_PREBUILTS_BOT
